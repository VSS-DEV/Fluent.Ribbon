<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Fluent="clr-namespace:Fluent"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:converters="clr-namespace:Fluent.Converters">

    <ControlTemplate x:Key="Fluent.Ribbon.Templates.RibbonCheckBox"
                     TargetType="{x:Type Fluent:CheckBox}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="16" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid HorizontalAlignment="Left"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Border x:Name="border"
                        Width="13"
                        Height="13"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid>
                        <Path x:Name="CheckIcon"
                              Width="7.5"
                              Height="6.9"
                              HorizontalAlignment="Center"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Fluent:FrameworkHelper.UseLayoutRounding="False"
                              Data="M48.4375,110.4375 L51.4995,112.812 L56.3745,107.24883"
                              Stretch="Fill"
                              Stroke="{DynamicResource Fluent.Ribbon.Brushes.AccentBase}"
                              StrokeEndLineCap="Triangle"
                              StrokeStartLineCap="Triangle"
                              StrokeThickness="1.5"
                              Opacity="0" />
                        <Rectangle x:Name="IndeterminateIcon"
                                   Width="7"
                                   Height="7"
                                   Fill="{DynamicResource Fluent.Ribbon.Brushes.Gray2}"
                                   Opacity="0" />
                    </Grid>
                </Border>
            </Grid>
            <ContentControl Grid.Column="1"
                            Margin="2 0 0 0"
                            Foreground="{TemplateBinding Foreground}"
                            IsTabStop="False">
                <ContentPresenter x:Name="contentPresenter"
                                  Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
            </ContentControl>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
                <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
                <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Background}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
                <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
                <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.Border}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.Border}" />
                <Setter TargetName="contentPresenter" Property="Opacity" Value=".55" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckIcon" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter TargetName="IndeterminateIcon" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter TargetName="CheckIcon" Property="LayoutTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="-1" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Fluent.Ribbon.Templates.CheckBox.Simplified"
                     TargetType="{x:Type Fluent:CheckBox}">
        <Border x:Name="border"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="{TemplateBinding BorderThickness}">
            <StackPanel x:Name="stackPanel"
                        Margin="{TemplateBinding Padding}"
                        Orientation="Horizontal">
                <Border Width="13"
                        Height="13"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid>
                        <Path x:Name="CheckIcon"
                              Width="7.5"
                              Height="6.9"
                              HorizontalAlignment="Center"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Fluent:FrameworkHelper.UseLayoutRounding="False"
                              Data="M48.4375,110.4375 L51.4995,112.812 L56.3745,107.24883"
                              Stretch="Fill"
                              Stroke="{DynamicResource Fluent.Ribbon.Brushes.AccentBase}"
                              StrokeEndLineCap="Triangle"
                              StrokeStartLineCap="Triangle"
                              StrokeThickness="1.5"
                              Opacity="0" />
                        <Rectangle x:Name="IndeterminateIcon"
                                   Width="7"
                                   Height="7"
                                   Fill="{DynamicResource Fluent.Ribbon.Brushes.Gray2}"
                                   Opacity="0" />
                    </Grid>
                </Border>
                <ContentControl Margin="2 0 0 0"
                                Foreground="{TemplateBinding Foreground}"
                                IsTabStop="False">
                    <StackPanel Orientation="Horizontal">
                        <Grid x:Name="iconImageGrid"
                              Margin="0 0 2 0"
                              HorizontalAlignment="Center"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Visibility="Collapsed">
                            <Fluent:IconPresenter x:Name="iconImage"
                                                  SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}"
                                                  MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}"
                                                  LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}"
                                                  CustomSize="{Binding Path=(Fluent:RibbonProperties.CustomIconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                                  IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Border x:Name="iconImageBorder"
                                    Width="{Binding ActualWidth, ElementName=iconImage}"
                                    Height="{Binding ActualHeight, ElementName=iconImage}"
                                    BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.Border}"
                                    BorderThickness="1"
                                    Visibility="Collapsed" />
                        </Grid>
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="1 0 0 0"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          ContentSource="Header"
                                          RecognizesAccessKey="True" />
                    </StackPanel>
                </ContentControl>
            </StackPanel>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Size" Value="Small" />
                    <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Size" Value="Middle" />
                    <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter TargetName="iconImageBorder" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Size" Value="Large" />
                    <Condition SourceName="iconImage" Property="OptimalIcon" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
            </MultiTrigger>

            <Trigger Property="Size" Value="Small">
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="iconImageGrid" Property="Margin" Value="0" />
                <Setter TargetName="iconImageGrid" Property="Visibility" Value="Visible" />
                <Setter TargetName="stackPanel" Property="Margin" Value="4 0" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="iconImageGrid" Property="Margin" Value="0" />
                <Setter TargetName="iconImageGrid" Property="Visibility" Value="Visible" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
                <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
                <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
                <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
                <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.Border}" />
                <Setter TargetName="stackPanel" Property="Opacity" Value=".5" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckIcon" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter TargetName="IndeterminateIcon" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter TargetName="CheckIcon" Property="LayoutTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="-1" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="Fluent.Ribbon.Styles.RibbonCheckBox"
           TargetType="{x:Type Fluent:CheckBox}">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Content" Value="{Binding Path=Header, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />
        <Setter Property="ContentTemplate" Value="{Binding Path=HeaderTemplate, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />
        <Setter Property="ContentTemplateSelector" Value="{Binding Path=HeaderTemplateSelector, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />
        <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Fluent.Ribbon.Styles.FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelText}" />
        <Setter Property="Margin" Value="{DynamicResource Fluent.Ribbon.Values.Default.Margin}" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.RibbonCheckBox}" />
        <Setter Property="ToolTipService.ShowDuration" Value="30000" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsSimplified" Value="True">
                <Setter Property="Fluent:RibbonProperties.IconSize" Value="Medium" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Padding" Value="6 2" />
                <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.CheckBox.Simplified}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSimplified" Value="True" />
                    <Condition Property="Size" Value="Small" />
                </MultiTrigger.Conditions>
                <Setter Property="Fluent:RibbonProperties.IconSize" Value="Small" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>